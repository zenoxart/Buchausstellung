<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Definiert die Sekundärfarbe für Schriftarten-->
    <SolidColorBrush x:Key="SchriftfarbeDunklesDesign" Color="White"/>

    <!-- Stil für einen Anwendungsbutton mit Font-Icons -->
    <Style 
            x:Key="AppSymbol"
            TargetType="Button"
            >

        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="FontFamily" Value="Wingdings 2" />
        <Setter Property="FontSize" Value="22pt" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>

            <!-- Weil das ändern des Microsoft-Templates im Training zu viel Arbeit wäre,
                     deaktivierte Symbole ein bisschen Transparent machen
                     Trigger, die auf andere Eigenschaften reagieren sollen,
                     sind nur "Trigger" und keine "DataTrigger" -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>

            <!-- DataTrigger gehen auf das ViewModel im DataContext los -->
            <DataTrigger Binding="{Binding DunklesDesign}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource SchriftfarbeDunklesDesign}"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!-- Stil für die größe eines Image-Icon in einem Button -->
    <Style TargetType="Image" x:Key="BtnIcon">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <!-- Stil-Template für einen Button, welcher genauso nichtausführbar ist-->
    <ControlTemplate x:Key="AppSymbolCanExecute" TargetType="{x:Type Button}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="Transparent"/>
                <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Stil um den Window-Hintergrund mit dem Dunklen-Design zu realisieren-->
    <Style TargetType="Window" x:Key="Windowbackground">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DunklesDesign}" Value="True">
                <Setter Property="Background" Value="#2d2d30"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>